{exec, spawn} = require 'child_process'
jinjs = require 'jinjs'
path = require 'path'
fs = require 'fs'
std = require './std'

jinjs.registerExtension '.tpl'

nginx_conf = require '../templates/nginx.conf'
stdio = require './stdio'

defaults = 
    php_bind: '127.0.0.1:9000'
    nginx_bind: '127.0.0.1:8000'
    behavior: 'standard'
    
_vars =
    prefix_dir: 'nginx-'
    php_bind: defaults.php_bind
    nginx_bind: defaults.nginx_bind
    fresh: true
    behavior: defaults.behavior
    behavior_file: ''
    meta: JSON.parse (fs.readFileSync path.join(__dirname, '..', 'package.json'), 'UTF-8')

_processes = {}
_proc_stoping = false
_killed = []
_stop_callback = false
_initiated = false

bind = (php_bind, nginx_bind) ->
    _vars.php_bind = php_bind
    _vars.nginx_bind = nginx_bind
    
behavior = (profile) ->
    posible = ['zend', 'standard']
    found = false 
    for next of posible
        if next is profile
            found = true 
    if not found
        stdio.error 'Invalid behavior selected: ' + profile
        return false
    _vars.behavior = profile
    _vars.behavior_file = require '../templates/behaviors/' + profile + '.conf'
    true 
    
extraDirectives = (directivesFile) ->
    exists = path.existsSync(directivesFile);
    if not exists
        stdio.error 'Passed extra directives file do not exists: ' + directivesFile
        return false
        
    _vars.extraDirectives = fs.readFileSync directivesFile, 'UTF-8'
    return true

phpExited = (code, signal) ->
    killed 'php', code, signal
    
nginxExited = (code, signal) ->
    killed 'nginx', code, signal
    
tailExited = (code, signal) ->
    killed 'tail', code, signal

errExited = (code, signal) ->
    killed 'err', code, signal
      
killed = (processName, code, signal) ->
    if not _proc_stoping and (code is not 0 or signal is not null)
        if code is not 0
            stdio.error 'Process "' + processName + '" has exited with errorcode: ' + code
        else
            stdio.error 'Process "' + processName + '" has has been killed: ' + signal
        stdio.error 'Shutting down node-sng...'
        stop()
        
    _killed.push processName unless processName of _killed
    
    if _killed.length is 4
    
      exec 'rm -r ' + _vars.tmpdir, ->
          if _stop_callback
              res =
                  vars : _vars
                  processes : _processes
              _stop_callback null, res
              return
          else
              std.delay 1000, ->
                  stdio.logme 'Server has been closed properly' false
                  process.exit()
                  
                
start = (callback)  ->

    callback ?= false
    
    (err, stdout, stderr) <- exec 'mktemp -d /tmp/' + _vars.prefix_dir + 'XXXXXXX'

    if (err !== null) 
        stdio.error 'exec error:' + err
        process.exit() 

    _vars.tmpdir = stdout.substr 0, stdout.length - 1
    _vars.access_log = _vars.tmpdir + '/access.log'
    _vars.error_log = _vars.tmpdir + '/error.log'
    _vars.behavior_file = _vars.behavior_file.render _vars
    _vars.nginx_conf = nginx_conf.render _vars

    _vars.conffilename =  path.join _vars.tmpdir,'nginx.conf'
    fs.writeFileSync _vars.conffilename, _vars.nginx_conf
    fs.writeFileSync _vars.access_log, ''
    fs.writeFileSync _vars.error_log, ''
    
    if not callback
        stdio.logme 'Document root: ' + stdio.emphasize(_vars.base)    
        stdio.logme 'Behavior: ' + stdio.emphasize(_vars.behavior)
        stdio.logme 'NGinx temporary directory is ' + stdio.emphasize(_vars.tmpdir)
    
    if not callback  
        stdio.logme 'Starting PHP CGI on ' + stdio.emphasize(_vars.php_bind)

    _processes.php = spawn 'php-cgi', ['-b',_vars.php_bind,'-q']
    _processes.php.on 'exit', phpExited
    if not callback
        _processes.php.stdout.on 'data', stdio.print_stdout
        _processes.php.stderr.on 'data', stdio.print_stderr

    if not callback
        stdio.logme "Starting NGinx CGI on " + stdio.emphasize _vars.nginx_bind

    _processes.nginx = spawn 'nginx', ['-c',_vars.conffilename]
    _processes.nginx.on 'exit', nginxExited
    if not callback
        _processes.nginx.stdout.on 'data', stdio.print_stdout
        _processes.nginx.stderr.on 'data', stdio.print_stderr

    _processes.tail = spawn 'tail', ['-f',_vars.access_log]
    _processes.tail.on 'exit', tailExited
    if not callback
        _processes.tail.stdout.on 'data', stdio.print_accesslog

    _processes.err = spawn 'tail', ['-f', _vars.error_log]
    _processes.err.on 'exit', errExited
    if not callback
        _processes.err.stdout.on 'data', stdio.print_stderr



    if callback
        process.nextTick ->
            res =
                vars: _vars
                processes: _processes
            callback null, res
        return
        
    setTimeout


stop = (callback) ->
    callback ?= false
    _stop_callback :=callback
    _proc_stoping := true
    _processes.tail.kill 'SIGINT' unless _processes.tail is undefined or _processes.tail.killed
    _processes.nginx.kill 'SIGINT' unless _processes.nginx is undefined or _processes.nginx.killed
    _processes.php.kill 'SIGINT' unless _processes.php is undefined or _processes.php.killed
    _processes.err.kill 'SIGINT' unless _processes.err is undefined or _processes.err.killed

base = (base) ->
    _vars.base = base

exports.defaults = defaults
exports.base = base
exports.bind = bind
exports.start = start
exports.stop = stop
exports.behavior = behavior
exports.extraDirectives = extraDirectives
